/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 03 11:48:44 GMT 2015
 */

package com.epam.tour.entity;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.Test;

import java.util.Date;

import static org.junit.Assert.*;

public class Order_ESTest {

  @Test
  public void test00()  throws Throwable  {
      Order order0 = new Order();
      order0.setPaid(true);
      boolean boolean0 = order0.isPaid();
      assertTrue(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      Order order0 = new Order();
      boolean boolean0 = order0.isPaid();
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      Order order0 = new Order();
      MockDate mockDate0 = new MockDate(0L);
      order0.setDateTime((Date) mockDate0);
      order0.hashCode();
      assertEquals(0.0, order0.getAmount(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      Order order0 = new Order();
      User user0 = order0.getUser();
      assertNull(user0);
  }

  @Test
  public void test04()  throws Throwable  {
      Order order0 = new Order();
      User user0 = new User();
      order0.setUser(user0);
      User user1 = order0.getUser();
      assertNull(user1.getUsername());
  }

  @Test
  public void test05()  throws Throwable  {
      Order order0 = new Order();
      Tour tour0 = order0.getTour();
      assertNull(tour0);
  }

  @Test
  public void test06()  throws Throwable  {
      Order order0 = new Order();
      Tour tour0 = new Tour();
      order0.setTour(tour0);
      Tour tour1 = order0.getTour();
      assertFalse(tour1.isHot());
  }

  @Test
  public void test07()  throws Throwable  {
      Order order0 = new Order();
      MockDate mockDate0 = new MockDate(0L);
      order0.setDateTime((Date) mockDate0);
      MockDate mockDate1 = (MockDate)order0.getDateTime();
      assertNotSame(mockDate1, mockDate0);
  }

  @Test
  public void test08()  throws Throwable  {
      Order order0 = new Order();
      double double0 = order0.getAmount();
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      Order order0 = new Order();
      order0.setAmount(230.8230617972);
      double double0 = order0.getAmount();
      assertEquals(230.8230617972, double0, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      Order order0 = new Order();
      order0.setAmount((-325.5239973284885));
      double double0 = order0.getAmount();
      assertEquals((-325.5239973284885), double0, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      Order order0 = new Order();
      MockDate mockDate0 = new MockDate((-1875), 2338, (-1875), 125, (-1875));
      order0.setDateTime((Date) mockDate0);
      order0.setAmount((-0.2334519942583687));
      order0.hashCode();
      assertEquals((-0.2334519942583687), order0.getAmount(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      Order order0 = new Order();
      User user0 = new User();
      user0.setUsername("S]lt3A(V9HU>LMU{=");
      order0.setUser(user0);
      // Undeclared exception!
      try {
        order0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Order order0 = new Order();
      Order order1 = new Order();
      order0.setAmount((-1.0));
      boolean boolean0 = order0.equals((Object) order1);
      assertEquals((-1.0), order0.getAmount(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      Order order0 = new Order();
      // Undeclared exception!
      try {
        order0.getDateTime();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Order order0 = new Order();
      order0.setPaid(true);
      MockDate mockDate0 = new MockDate(0L);
      order0.setDateTime((Date) mockDate0);
      order0.hashCode();
      assertTrue(order0.isPaid());
  }

  @Test
  public void test16()  throws Throwable  {
      Order order0 = new Order();
      Tour tour0 = new Tour();
      order0.setTour(tour0);
      // Undeclared exception!
      try {
        order0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Order order0 = new Order();
      MockDate mockDate0 = new MockDate(2275L);
      order0.setDateTime((Date) mockDate0);
      Order order1 = new Order();
      // Undeclared exception!
      try {
        order0.equals((Object) order1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Order order0 = new Order();
      Tour tour0 = new Tour();
      order0.setTour(tour0);
      assertEquals(TourType.VACATION, tour0.getType());
      
      Order order1 = new Order();
      boolean boolean0 = order0.equals((Object) order1);
      assertFalse(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      Order order0 = new Order();
      User user0 = new User();
      order0.setUser(user0);
      Order order1 = new Order();
      boolean boolean0 = order1.equals((Object) order0);
      assertFalse(boolean0);
      assertEquals(0.0, order0.getAmount(), 0.01D);
  }

  @Test
  public void test20()  throws Throwable  {
      Order order0 = new Order();
      order0.setAmount((double) 125);
      Order order1 = new Order();
      boolean boolean0 = order0.equals((Object) order1);
      assertEquals(125.0, order0.getAmount(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      Order order0 = new Order();
      boolean boolean0 = order0.equals((Object) 1);
      assertFalse(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      Order order0 = new Order();
      String string0 = order0.toString();
      assertEquals("Order{user=null, tour=null, dateTime=null, amount=0.0, paid=false}", string0);
  }

  @Test
  public void test23()  throws Throwable  {
      Order order0 = new Order();
      User user0 = new User();
      order0.setUser(user0);
      Order order1 = new Order();
      boolean boolean0 = order0.equals((Object) order1);
      assertFalse(boolean0);
      assertEquals(0.0, order0.getAmount(), 0.01D);
  }

  @Test
  public void test24()  throws Throwable  {
      Order order0 = new Order();
      Tour tour0 = new Tour();
      order0.setTour(tour0);
      assertEquals(TourType.VACATION, tour0.getType());
      
      Order order1 = new Order();
      boolean boolean0 = order1.equals((Object) order0);
      assertFalse(boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      Order order0 = new Order();
      order0.setPaid(true);
      Order order1 = new Order();
      boolean boolean0 = order0.equals((Object) order1);
      assertTrue(order0.isPaid());
      assertFalse(boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      Order order0 = new Order();
      boolean boolean0 = order0.equals((Object) order0);
      assertTrue(boolean0);
  }
}
